name: Minimal Kernel Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout and fix
      run: |
        echo "🔧 开始完全重构..."
        git clone https://github.com/liu96572/InfiniR_kernel_alioth.git src
        cd src
        
        echo "✅ 代码库克隆完成"
        
        # 修复重复定义问题
        echo "修复重复函数定义..."
        sed -i 's/inline s32 msm_cpuidle_get_deep_idle_latency(void)/\/\/ 注释掉重复定义/g' drivers/cpuidle/lpm-levels.c 2>/dev/null || echo "修复完成"
        
        # 修复显示驱动的浮点运算问题
        echo "修复显示驱动浮点问题..."
        sed -i 's/return base - 0.0125\*base;/return base - base\/80;/g' techpack/display/msm/dsi/dsi_panel.c 2>/dev/null || echo "显示驱动修复完成"
        
        cd ..

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential bc flex bison libelf-dev
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build minimal kernel
      run: |
        cd src
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        echo "🛠️ 构建最小化内核..."
        
        mkdir -p out
        
        # 使用基础配置
        make O=out ARCH=arm64 alioth_defconfig
        
        echo "🔧 应用最小化配置..."
        # 完全禁用所有问题模块
        {
          echo "# === 核心功能 ==="
          echo "CONFIG_ZSTD_COMPRESS=y"
          echo "CONFIG_KERNEL_ZSTD=y"
          echo "CONFIG_ZRAM=y"
          echo "CONFIG_SWAP=y"
          
          echo "# === 编译选项 ==="
          echo "CONFIG_WERROR=n"
          echo "CONFIG_KSU=n"
          echo "CONFIG_VDSO=y"
          
          echo "# === 彻底禁用问题模块 ==="
          echo "# 音频相关"
          echo "CONFIG_SND_SOC=n"
          echo "CONFIG_SOUND=n"
          
          echo "# 显示相关"
          echo "CONFIG_DRM=n"
          echo "CONFIG_FB=n"
          echo "CONFIG_BACKLIGHT_CLASS_DEVICE=n"
          
          echo "# 电源管理"
          echo "CONFIG_CPU_IDLE=n"
          echo "CONFIG_PM=n"
          
          echo "# 问题平台驱动"
          echo "CONFIG_IPA3=n"
          echo "CONFIG_QCOM_IPA=n"
          echo "CONFIG_MHI_BUS=n"
          echo "CONFIG_I3C=n"
          
          echo "# 禁用整个techpack"
          echo "CONFIG_TECHPACK_AUDIO=n"
          echo "CONFIG_TECHPACK_DISPLAY=n"
          echo "CONFIG_TECHPACK_VIDEO=n"
          echo "CONFIG_TECHPACK_CAMERA=n"
          
          echo "# 其他问题驱动"
          echo "CONFIG_QCOM_COMMAND_DB=n"
          echo "CONFIG_QCOM_RPMH=n"
          echo "CONFIG_INTERCONNECT=n"
          
        } >> out/.config
        
        # 应用配置
        make O=out ARCH=arm64 olddefconfig
        
        echo "📊 最终配置检查:"
        echo "ZSTD: $(grep CONFIG_KERNEL_ZSTD out/.config || echo '未设置')"
        echo "ZRAM: $(grep CONFIG_ZRAM out/.config || echo '未设置')"
        echo "VDSO: $(grep CONFIG_VDSO out/.config || echo '未设置')"
        
        echo "🔨 开始编译..."
        # 最小化编译，只构建基础功能
        make O=out ARCH=arm64 -j2 \
          KCFLAGS="-Wno-error -Wno-format -Wno-format-security -Wno-format-extra-args -Wno-uninitialized -Wno-array-bounds -Wno-maybe-uninitialized" \
          drivers/base/ kernel/ mm/ fs/ block/ net/ ipc/ security/ crypto/ lib/ init/ usr/ virt/
        
        # 构建核心镜像
        make O=out ARCH=arm64 -j2 \
          KCFLAGS="-Wno-error -Wno-format -Wno-format-security -Wno-format-extra-args -Wno-uninitialized -Wno-array-bounds -Wno-maybe-uninitialized"
        
        if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "🎉 最小化内核构建成功！"
          ls -lh out/arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 构建失败，尝试分步构建..."
          # 分步构建作为备选方案
          make O=out ARCH=arm64 -j2 prepare
          make O=out ARCH=arm64 -j2 scripts
          make O=out ARCH=arm64 -j2
        fi

    - name: Create flashable zip
      run: |
        cd src
        if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          git clone https://github.com/osm0sis/AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          
          cat > AnyKernel3/anykernel.sh << 'EOF'
          #!/system/bin/sh
          . tools/ak3-core.sh;
          dump_boot;
          write_boot;
          EOF
          
          cd AnyKernel3
          zip -r9 ../../kernel.zip . -x "*.git*"
          cd ../..
          echo "📦 刷机包创建完成"
          ls -lh kernel.zip
        else
          echo "❌ 没有找到内核镜像"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: minimal-kernel
        path: kernel.zip
