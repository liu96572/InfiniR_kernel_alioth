name: Performance Optimized Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup and Fix Issues
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev libssl-dev bc flex bison libelf-dev dwarves python3 git zip curl wget patch
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu clang lld
        
        # 修复脚本权限
        echo "🔧 修复脚本权限..."
        chmod -R +x scripts/ 2>/dev/null || true
        
        # 处理KernelSU配置 - 使用简单的echo命令
        echo "📝 处理KernelSU配置..."
        mkdir -p drivers/kernelsu
        echo 'config KSU' > drivers/kernelsu/Kconfig
        echo '    bool "KernelSU"' >> drivers/kernelsu/Kconfig
        echo '    default n' >> drivers/kernelsu/Kconfig
        echo '    help' >> drivers/kernelsu/Kconfig
        echo '      KernelSU support' >> drivers/kernelsu/Kconfig

    - name: Fix VDSO symbols with patch
      run: |
        echo "🔧 应用VDSO动态修补..."
        
        # 创建VDSO修补文件
        cat > vdso_fix.patch << 'EOF'
--- a/arch/arm64/include/asm/vdso.h
+++ b/arch/arm64/include/asm/vdso.h
@@ -1,10 +1,31 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __ASM_VDSO_H
 #define __ASM_VDSO_H
 
 #include <asm/page.h>
+#include <asm/vdso/vdso.h>
+
+/*
+ * VDSO符号修复补丁
+ * 修复缺失的偏移量定义
+ */
+#ifndef vdso_offset_sigtramp
+#define vdso_offset_sigtramp		((unsigned long)(&__vdso_sigtramp) - (unsigned long)(&__vdso_start))
+#endif
+
+#ifndef vdso_offset_rt_sigtramp
+#define vdso_offset_rt_sigtramp		((unsigned long)(&__vdso_rt_sigtramp) - (unsigned long)(&__vdso_start))
+#endif
+
+#ifndef vdso_offset_gettimeofday
+#define vdso_offset_gettimeofday	((unsigned long)(&__vdso_gettimeofday) - (unsigned long)(&__vdso_start))
+#endif
+
+#ifndef vdso_offset_clock_gettime
+#define vdso_offset_clock_gettime	((unsigned long)(&__vdso_clock_gettime) - (unsigned long)(&__vdso_start))
+#endif
 
 #ifndef __ASSEMBLY__
-
 #include <generated/vdso-offsets.h>
 
 #define VDSO_SYMBOL(base, name)							\
@@ -13,6 +34,7 @@
 	(void __user *)((unsigned long)(base) + (vdso_offset_##name & ~1UL) - VDSO_LBASE)
 
 #endif /* !__ASSEMBLY__ */
-
 #endif /* __ASM_VDSO_H */
+
+/* VDSO修复补丁结束 */
EOF
        
        # 应用修补
        echo "应用VDSO修补..."
        if patch -p1 -l < vdso_fix.patch; then
          echo "✅ VDSO修补应用成功"
        else
          echo "⚠️ 修补可能部分应用，继续编译..."
        fi

    - name: Configure kernel for performance
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CC=clang
        export LD=ld.lld
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        mkdir -p out
        cp arch/arm64/configs/alioth_defconfig out/.config
        
        # 性能优化配置
        {
          echo "CONFIG_ZSTD_COMPRESS=y"
          echo "CONFIG_ZSTD_DECOMPRESS=y"
          echo "CONFIG_KERNEL_ZSTD=y"
          echo "CONFIG_ZRAM=y"
          echo "CONFIG_ZRAM_DEF_COMP_ZSTD=y"
          echo "CONFIG_SWAP=y"
          echo "CONFIG_CGROUP_FREEZER=y"
          echo "CONFIG_DEBUG_FS=y"
          echo "CONFIG_VDSO=y"
          echo "CONFIG_ARM64_VDSO=y"
          echo "CONFIG_GENERIC_TIME_VSYSCALL=y"
          echo "CONFIG_ARM_ARCH_TIMER=y"
          echo "CONFIG_MODULES=y"
          echo "CONFIG_KALLSYMS=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
          echo "CONFIG_KSU=n"
        } >> out/.config
        
        make O=out ARCH=arm64 olddefconfig

    - name: Build with performance flags
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CC=clang
        export LD=ld.lld
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        export KCFLAGS="-O2 -mcpu=cortex-a77 -mtune=cortex-a77"
        
        make O=out ARCH=arm64 -j$(nproc)
        
        if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "✅ 高性能内核构建成功！"
          ls -lh out/arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 构建失败！"
          exit 1
        fi

    - name: Prepare AnyKernel3
      run: |
        git clone https://github.com/osm0sis/AnyKernel3
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        
        cat > AnyKernel3/anykernel.sh << 'EOF'
        #!/system/bin/sh
        . tools/ak3-core.sh;
        dump_boot;
        write_boot;
        EOF

    - name: Create flashable zip
      run: |
        cd AnyKernel3
        zip -r9 ../kernel.zip . -x "*.git*"
        cd ..
        ls -lh *.zip

    - name: Upload kernel
      uses: actions/upload-artifact@v4
      with:
        name: performance-kernel
        path: kernel.zip
