name: Performance Optimized Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup and Fix Issues
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev libssl-dev bc flex bison libelf-dev dwarves python3 git zip curl wget
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu clang lld
        
        # 修复脚本权限
        echo "🔧 修复脚本权限..."
        chmod -R +x scripts/ 2>/dev/null || true
        
        # 处理KernelSU配置
        echo "📝 处理KernelSU配置..."
        mkdir -p drivers/kernelsu
        cat > drivers/kernelsu/Kconfig << 'EOF'
config KSU
    bool "KernelSU"
    default n
    help
      KernelSU support
EOF

    - name: Fix VDSO symbols in source code
      run: |
        echo "🔧 修复VDSO符号定义..."
        
        # 强制修复vdso.h文件
        cp arch/arm64/include/asm/vdso.h arch/arm64/include/asm/vdso.h.backup
        
        cat > arch/arm64/include/asm/vdso.h << 'EOF'
#ifndef __ASM_VDSO_H
#define __ASM_VDSO_H

#include <asm/page.h>
#include <asm/vdso/vdso.h>

/* 修复所有缺失的VDSO符号 */
#ifndef vdso_offset_sigtramp
#define vdso_offset_sigtramp	((unsigned long)(&__vdso_sigtramp) - (unsigned long)(&__vdso_start))
#endif

#ifndef vdso_offset_rt_sigtramp  
#define vdso_offset_rt_sigtramp	((unsigned long)(&__vdso_rt_sigtramp) - (unsigned long)(&__vdso_start))
#endif

#ifndef vdso_offset_gettimeofday
#define vdso_offset_gettimeofday	((unsigned long)(&__vdso_gettimeofday) - (unsigned long)(&__vdso_start))
#endif

#ifndef vdso_offset_clock_gettime
#define vdso_offset_clock_gettime	((unsigned long)(&__vdso_clock_gettime) - (unsigned long)(&__vdso_start))
#endif

#ifndef vdso_offset_clock_getres
#define vdso_offset_clock_getres	((unsigned long)(&__vdso_clock_getres) - (unsigned long)(&__vdso_start))
#endif

#ifndef vdso_offset_clock_gettime64
#define vdso_offset_clock_gettime64	((unsigned long)(&__vdso_clock_gettime64) - (unsigned long)(&__vdso_start))
#endif

#endif /* __ASM_VDSO_H */
EOF
        
        echo "✅ VDSO符号修复完成"

    - name: Configure kernel for performance
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CC=clang
        export LD=ld.lld
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        mkdir -p out
        cp arch/arm64/configs/alioth_defconfig out/.config
        
        # 基本配置
        {
          echo "CONFIG_ZSTD_COMPRESS=y"
          echo "CONFIG_ZSTD_DECOMPRESS=y"
          echo "CONFIG_KERNEL_ZSTD=y"
          echo "CONFIG_ZRAM=y"
          echo "CONFIG_ZRAM_DEF_COMP_ZSTD=y"
          echo "CONFIG_SWAP=y"
          echo "CONFIG_CGROUP_FREEZER=y"
          echo "CONFIG_DEBUG_FS=y"
          echo "CONFIG_VDSO=y"
          echo "CONFIG_KSU=n"
        } >> out/.config
        
        make O=out ARCH=arm64 olddefconfig

    - name: Build with performance flags
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CC=clang
        export LD=ld.lld
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        make O=out ARCH=arm64 -j$(nproc)
        
        if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "✅ 高性能内核构建成功！"
          ls -lh out/arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 构建失败！"
          exit 1
        fi

    - name: Prepare AnyKernel3
      run: |
        git clone https://github.com/osm0sis/AnyKernel3
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        
        cat > AnyKernel3/anykernel.sh << 'EOF'
        #!/system/bin/sh
        kernel.string=Performance Kernel
        do.devicecheck=1
        device.name1=alioth
        . tools/ak3-core.sh;
        dump_boot;
        write_boot;
        EOF

    - name: Create flashable zip
      run: |
        cd AnyKernel3
        zip -r9 ../kernel.zip . -x "*.git*"
        cd ..
        ls -lh *.zip

    - name: Upload kernel
      uses: actions/upload-artifact@v4
      with:
        name: performance-kernel
        path: kernel.zip
