name: Fixed Kernel Solution

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout and fix all issues
      run: |
        echo "🔧 开始修复所有问题..."
        
        # 手动克隆仓库
        git clone https://github.com/liu96572/InfiniR_kernel_alioth.git src
        cd src
        
        echo "✅ 代码克隆完成"
        
        # 修复脚本权限
        echo "修复脚本权限..."
        find scripts -name "*.sh" -exec chmod +x {} \; 2>/dev/null || echo "权限修复完成"
        
        # 修复KernelSU配置 - 改进的逻辑
        echo "处理KernelSU配置..."
        if [ -d "drivers/kernelsu" ]; then
          echo "KernelSU目录已存在"
          # 无论Kconfig是否存在，都重新创建
          echo "创建/更新KernelSU Kconfig文件..."
          echo 'config KSU' > drivers/kernelsu/Kconfig
          echo '    bool "KernelSU"' >> drivers/kernelsu/Kconfig
          echo '    default n' >> drivers/kernelsu/Kconfig
          echo '    help' >> drivers/kernelsu/Kconfig
          echo '      KernelSU support' >> drivers/kernelsu/Kconfig
          echo "✅ KernelSU Kconfig已创建"
        else
          echo "创建KernelSU目录和Kconfig..."
          mkdir -p drivers/kernelsu
          echo 'config KSU' > drivers/kernelsu/Kconfig
          echo '    bool "KernelSU"' >> drivers/kernelsu/Kconfig
          echo '    default n' >> drivers/kernelsu/Kconfig
          echo "✅ KernelSU配置创建完成"
        fi
        
        # 修复VDSO问题
        echo "修复VDSO编译问题..."
        if [ -f "arch/arm64/kernel/signal.c" ]; then
          # 备份原文件
          cp arch/arm64/kernel/signal.c arch/arm64/kernel/signal.c.backup
          
          # 注释掉VDSO相关代码
          sed -i 's/sigtramp = VDSO_SYMBOL(current->mm->context.vdso, sigtramp);/\/\* VDSO disabled: sigtramp = VDSO_SYMBOL(current->mm->context.vdso, sigtramp); \*\//g' arch/arm64/kernel/signal.c
          sed -i 's/sigtramp = VDSO_SYMBOL(current->mm->context.vdso, rt_sigtramp);/\/\* VDSO disabled: sigtramp = VDSO_SYMBOL(current->mm->context.vdso, rt_sigtramp); \*\//g' arch/arm64/kernel/signal.c
          
          echo "✅ VDSO代码已注释"
        fi
        
        echo "🎯 所有修复完成"
        cd ..

    - name: Setup build environment
      run: |
        echo "📦 安装编译环境..."
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev libssl-dev bc flex bison libelf-dev
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        echo "✅ 环境准备完成"

    - name: Build kernel
      run: |
        cd src
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        echo "⚙️ 开始内核配置..."
        
        # 创建输出目录
        mkdir -p out
        
        # 复制默认配置
        cp arch/arm64/configs/alioth_defconfig out/.config
        
        # 添加必要配置（禁用VDSO）
        {
          echo "CONFIG_ZSTD_COMPRESS=y"
          echo "CONFIG_KERNEL_ZSTD=y"
          echo "CONFIG_ZRAM=y"
          echo "CONFIG_SWAP=y"
          echo "CONFIG_CGROUP_FREEZER=y"
          echo "CONFIG_DEBUG_FS=y"
          echo "CONFIG_VDSO=n"
          echo "CONFIG_ARM64_VDSO=n"
          echo "CONFIG_MODULES=y"
          echo "CONFIG_KSU=n"
        } >> out/.config
        
        # 应用配置
        make O=out ARCH=arm64 olddefconfig
        echo "✅ 内核配置完成"
        
        echo "🔨 开始编译内核..."
        make O=out ARCH=arm64 -j$(nproc)
        
        if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "🎉 内核构建成功！"
          ls -lh out/arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 构建失败"
          exit 1
        fi

    - name: Create flashable package
      run: |
        cd src
        echo "📦 创建刷机包..."
        
        git clone https://github.com/osm0sis/AnyKernel3
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        
        cat > AnyKernel3/anykernel.sh << 'EOF'
        #!/system/bin/sh
        . tools/ak3-core.sh;
        dump_boot;
        write_boot;
        EOF
        
        cd AnyKernel3
        zip -r9 ../../kernel.zip . -x "*.git*"
        cd ../..
        
        echo "✅ 刷机包创建完成"
        ls -lh kernel.zip

    - name: Upload kernel
      uses: actions/upload-artifact@v4
      with:
        name: fixed-kernel
        path: kernel.zip
