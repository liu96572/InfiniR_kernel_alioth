name: Rock Solid Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout and fix
      run: |
        echo "🔧 开始修复..."
        
        # 手动克隆
        git clone https://github.com/liu96572/InfiniR_kernel_alioth.git src
        cd src
        
        echo "✅ 克隆完成"
        
        # 修复权限
        echo "修复权限..."
        chmod +x scripts/*.sh 2>/dev/null || echo "权限修复完成"
        
        # 修复KernelSU - 使用简单的echo命令
        echo "修复KernelSU..."
        rm -rf drivers/kernelsu 2>/dev/null || true
        mkdir -p drivers/kernelsu
        echo "config KSU" > drivers/kernelsu/Kconfig
        echo "    bool \"KernelSU\"" >> drivers/kernelsu/Kconfig
        echo "    default n" >> drivers/kernelsu/Kconfig
        echo "    help" >> drivers/kernelsu/Kconfig
        echo "      KernelSU support" >> drivers/kernelsu/Kconfig
        echo "✅ KernelSU修复完成"
        
        cd ..

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential bc flex bison libelf-dev
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build kernel
      run: |
        cd src
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        echo "⚙️ 开始配置..."
        
        mkdir -p out
        cp arch/arm64/configs/alioth_defconfig out/.config
        
        # 添加配置
        {
          echo "CONFIG_ZSTD_COMPRESS=y"
          echo "CONFIG_KERNEL_ZSTD=y"
          echo "CONFIG_ZRAM=y"
          echo "CONFIG_SWAP=y"
          echo "CONFIG_VDSO=n"
          echo "CONFIG_WERROR=n"
          echo "CONFIG_KSU=n"
        } >> out/.config
        
        make O=out ARCH=arm64 olddefconfig
        echo "✅ 配置完成"
        
        echo "🔨 开始编译..."
        make O=out ARCH=arm64 -j2 KCFLAGS="-Wno-error"
        
        if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "🎉 内核构建成功！"
          ls -lh out/arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 构建失败"
          exit 1
        fi

    - name: Create zip
      run: |
        cd src
        git clone https://github.com/osm0sis/AnyKernel3
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        
        cat > AnyKernel3/anykernel.sh << 'EOF'
        #!/system/bin/sh
        . tools/ak3-core.sh;
        dump_boot;
        write_boot;
        EOF
        
        cd AnyKernel3
        zip -r9 ../../kernel.zip . -x "*.git*"
        cd ../..
        echo "📦 刷机包:"
        ls -lh kernel.zip

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: rock-solid-kernel
        path: kernel.zip
